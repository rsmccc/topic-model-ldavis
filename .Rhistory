plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
mwind
legend(0, 90, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
Sprin
legend(0, 90, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(0, 1, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(0, 0, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(0, -0.1, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(0, -1, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
legend(0, -1, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(0, 0, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(-1, 0, as.vector(levels(mwind$variable)), pch=16, col = c(1:3), horiz=TRUE)
legend(-1, 0, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
legend(-0.5, 0, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
legend(-0.5, 0.2, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
legend(-0.5, 0.5, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
legend(-0.5, 0.6, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.6, as.vector(levels(mwind$variable)), pch=16, col = c(1:3))
source('~/Development/R/stat579/hw2.R')
install.packages("reshape")
source('~/Development/R/stat579/hw2.R')
source('~/Development/R/stat579/hw2.R')
demo(graphics);
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
library(gdata)
wind <- read.xls("http://maitra.public.iastate.edu/stat579/datasets/wind.xls")
wind
library(reshape)
mwind <- melt(data.frame(id=c(1:12), wind), id="id")
mwind$cos <- cos(mwind$value)
mwind$sin <- sin(mwind$value)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
?unclass()
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
library(gdata)
wind <- read.xls("http://maitra.public.iastate.edu/stat579/datasets/wind.xls")
library(reshape)
mwind <- melt(data.frame(id=c(1:12), wind), id="id")
mwind$cos <- cos(mwind$value)
mwind$sin <- sin(mwind$value)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, bg = c("red", "green3", "blue", "black")[unclass(mwind$variable)], main = "Wind Direction in different seasons", pch = 21)
plot(x = mwind$cos, y = mwind$sin, bg = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
plot(x = mwind$cos, y = mwind$sin, col = mwind$variable, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.7, as.vector(levels(mwind$variable)), pch=16, col = c(1:4))
?gl()
levels(mwind$variable)
names(wind)
gwind <- gl(n = 4, k = 12, labels = names(wind))
gwind
mwind
gwind <- names("Season")
gwind <- gl(n = 4, k = 12, labels = names(wind))
names(gwind) <- "Season"
gwind <- as.data.frame(gwind)
names(gwind) <- "Season"
gwind
gwind$values <- c(wind$Spring, wind$Summer, wind$Autumn, wind$Winter)
gwind
gwind$values == mwind$value
gwind$cos <- cos(gwind$values)
gwind$sin <- sin(gwind$values)
gwind$labels <- c(rep("Spring", 12), rep("Summer", 12), rep("Autumn", 12), rep("Winter", 12))
gwind$labels == gwind$Season
lwind <- c(rep("Spring", 12), rep("Summer", 12), rep("Autumn", 12), rep("Winter", 12))
lwind <- as.data.frame(lwind)
names(lwind) <- "Season"
lwind$values <- c(wind$Spring, wind$Summer, wind$Autumn, wind$Winter)
lwind$cos <- cos(lwind$values)
lwind$sin <- sin(lwind$values)
rm(lwind)
lwind <- c(names(wind), each = 12)
lwind <- as.data.frame(lwind)
names(lwind) <- "Season"
lwind <- rep(names(wind), each = 12)
lwind <- as.data.frame(lwind)
names(lwind) <- "Season"
lwind
lwind <- rep(names(wind), each = 12)
lwind <- as.data.frame(lwind)
names(lwind) <- "season"
lwind$values <- c(wind$Spring, wind$Summer, wind$Autumn, wind$Winter)
lwind$cos <- cos(lwind$values)
lwind$sin <- sin(lwind$values)
rm(gwind)
rm(mwind)
rm(lwind)
lwind <- rep(names(wind), each = 12)
lwind <- as.data.frame(lwind)
names(lwind) <- "Season"
lwind$values <- c(wind$Spring, wind$Summer, wind$Autumn, wind$Winter)
lwind$cos <- cos(lwind$values)
lwind$sin <- sin(lwind$values)
plot(x = lwind$cos, y = lwind$sin, col = lwind$values, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.7, as.vector(levels(lwind$Season)), pch=16, col = c(1:4))
plot(x = lwind$cos, y = lwind$sin, col = lwind$values, main = "Wind Direction in different seasons", pch = 16)
plot(x = lwind$cos, y = lwind$sin, col = lwind$Season, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.7, as.vector(levels(lwind$Season)), pch=16, col = c(1:4))
lwind <- rep(names(wind), each = 12)
lwind <- as.data.frame(lwind)
names(lwind) <- "Season"
lwind$values <- c(wind$Spring, wind$Summer, wind$Autumn, wind$Winter)
lwind$cos <- cos(lwind$values)
lwind$sin <- sin(lwind$values)
lwind
plot(x = lwind$cos, y = lwind$sin, col = lwind$Season, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.7, as.vector(levels(lwind$Season)), pch=16, col = c(1:4))
plot(x = lwind$cos, y = lwind$sin, col = lwind$Season, main = "Wind Direction in different seasons", pch = 16)
legend(-0.5, 0.7, as.vector(levels(lwind$Season)), pch=16, col = c(1:4))
plot(x = lwind$cos, y = lwind$sin, col = lwind$Season, main = "Wind Direction in different seasons", pch = 16,
ylab = "sin(Direction)", xlab = "cos(Direction)")
plot(x = lwind$cos, y = lwind$sin, col = lwind$Season, main = "Wind Direction in different seasons", pch = 16, ylab = "sin(Direction)", xlab = "cos(Direction)")
legend(-0.5, 0.7, as.vector(levels(lwind$Season)), pch=16, col = c(1:4))
stack(wind)
swind <- stack(wind)
names(swind) <- c("Season", "values")
names(swind) <- c("values", "Season")
?stack()
swind$cos <- cos(swind$values)
swind$sin <- sin(swind$values)
plot(x = swind$cos, y = swind$sin, col = swind$Season, main = "Wind Direction in different seasons", pch = 16, ylab = "sin(Direction)", xlab = "cos(Direction)")
legend(-0.5, 0.7, as.vector(levels(swind$Season)), pch=16, col = c(1:4))
titanic <- read.csv("http://maitra.public.iastate.edu/stat579/datasets/titanic.txt")
sum(is.na(titanic$Age)) ## 557 NA's in age
class.gender <- table(titanic$PClass, titanic$Sex)
class.gender ### Far more men on the ship than women
sum(titanic[titanic$Sex == "male"]) / length(titanic$Sex)
sum(titanic$Sex[titanic$Sex == "male"]) / length(titanic$Sex)
count(titanic$Sex[titanic$Sex == "male"]) / length(titanic$Sex)
length(titanic$Sex[titanic$Sex == "male"]) / length(titanic$Sex)
length(titanic$Sex[titanic$Sex == "male"])
length(titanic$Sex)
length(titanic$Sex[titanic$Sex == "male"]) / length(titanic$Sex)
class.gender.survive <- table(titanic$PClass, titanic$Sex, titanic$Survived)
class.gender.survive
length(titanic$Survived[titanic$Survived == "male"]) / length(titanic$Survived) ## 64.8% male
length(titanic$Survived[titanic$Survived == 1]) / length(titanic$Survived) ## 64.8% male
length(titanic$Survived[titanic$Survived == 1 & titanic$Sex == "female"]) / length(titanic$Survived[titanic$Sex == "female"]) ## 34.3% survived
length(titanic$Survived[titanic$Survived == 1 & titanic$Sex == "male"]) / length(titanic$Survived[titanic$Sex == "male"])
length(titanic)
length(titanic$Name)
length(titanic$Age)
class.gender.survive.rate <- (class.gender.survive[,,2] / (class.gender)) * 100
class.gender.survive.rate
m.age.surv <- titanic[titanic$Survived == 1 & titanic$Sex == "male",]
m.age.surv
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male",])
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"])
age.surv
titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T)
age.surv
age.surv <- as.data.frame(age.surv, col.names = "men.surv")
names(age.surv) <- "male.surv"
age.surv
mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T)
age.surv <- as.data.frame(mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T))
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men.Surv"
age.surv$Men.Dead <- mean(titanic$Age[titanic$Survived == 0 & titanic$Sex == "male"], na.rm = T)
age.surv$Women.Surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "female"], na.rm = T)
age.surv$Women.Dead <- mean(titanic$Age[titanic$Survived == 0 & titanic$Sex == "female"], na.rm = T)
age.surv[0]
age.surv[1]
age.surv
age.surv[2]
detach("package:reshape", unload=TRUE)
?reshape()
age.surv$Labels <- c("Mean", "SE")
age.surv$Men.Surv[2]
age.surv$Men.Surv[1]
age.surv[2]
age.surv$Men.Surv[2] <- 0
nrow(age.surv)
nrow(age.surv) <- 2
age.surv.se <- c("Mean", "SE")
age.surv.se <- as.data.frame(age.surv.se)
names(age.surv.se) <- "labels"
age.surv.se <- "SE"
age.surv.se <- as.data.frame(age.surv.se)
names(age.surv.se) <- "labels"
age.surv$labels <- "Mean"
age.surv$labels <- factor("Mean")
age.groups <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
age.groups
age.groups <- as.data.frame(age.groups)
names(age.groups) <- "Men.Surv"
age.groups <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
age.groups <- as.data.frame(age.groups)
names(age.groups) <- "Men1"
age.surv <- mean(age.groups$Men1, na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men.Surv"
age.groups$Men0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "male"]
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men1"
age.surv <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"], na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men1"
age.surv$Men0 <- mean(titanic$Age[titanic$Survived == 0 & titanic$Sex == "male"], na.rm = T)
age.surv$Women1 <- mean(titanic$Age[titanic$Survived == 1 & titanic$Sex == "female"], na.rm = T)
age.surv$Women0 <- mean(titanic$Age[titanic$Survived == 0 & titanic$Sex == "female"], na.rm = T)
age.surv.se <- "SE"
age.surv.se <- as.data.frame(age.surv.se)
names(age.surv.se) <- "labels"
rm(age.groups)
men1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
titanic <- read.csv("http://maitra.public.iastate.edu/stat579/datasets/titanic.txt")
men1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
men0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "male"]
women1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "female"]
women0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "female"]
men1.mean <- mean(men1, na.rm = T)
age.surv <- mean(men1, na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men1"
age.surv$Men0 <- mean(men0, na.rm = T)
age.surv$Women1 <- mean(women1, na.rm = T)
age.surv$Women0 <- mean(women0, na.rm = T)
age.surv.se <- sd(men1) / sqrt(length(men1))
sd(men1) / sqrt(length(men1))
sum(is.na(men1))
sum(is.na(men0))
men1 <- titanic$Age[!is.na(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"])]
sum(is.na(men1))
men1 <- titanic$Age[!is.na(titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"])]
men1
men1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
men1
men1.na <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male"]
men1 <- men1.na[!is.na(men1.na)]
sum(is.na(men1))
men1.na <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male" & !is.na(titanic$Age)]
men1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male" & !is.na(titanic$Age)]
men0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "male" & !is.na(titanic$Age)]
women1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "female" & !is.na(titanic$Age)]
women0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "female" & !is.na(titanic$Age)]
age.surv <- mean(men1, na.rm = T)
age.surv <- as.data.frame(age.surv)
names(age.surv) <- "Men1"
age.surv$Men0 <- mean(men0, na.rm = T)
age.surv$Women1 <- mean(women1, na.rm = T)
age.surv$Women0 <- mean(women0, na.rm = T)
age.surv.se <- sd(men1) / sqrt(length(men1))
age.surv.se <- as.data.frame(age.surv.se)
names(age.surv.se) <- "Men1"
?var()
age.surv.means <- list(men1 = mean(men1, na.rm = T))
age.surv.means <- list(men1 = mean(men1), men0 = mean(men0))
age.surv.means <- list(men1 = mean(men1), men0 = mean(men0), women1 = mean(women1), women0 = mean(women0))
means <- list(men1 = mean(men1), men0 = mean(men0), women1 = mean(women1), women0 = mean(women0))
rm(age.surv)
rm(age.surv.means)
se <- list(men1 = sd(men1) / sqrt(length(men1)), men0 = sd(men0) / sqrt(length(men0)))
std <- function(x) sd(x) / sqrt(length(x))
std(men1)
groups <- list(men1, men0, women1, women0)
groups
?list()
?pairlist()
groups <- pairlist(men1, men0, women1, women0)
groups
groups <- list(men1, men0, women1, women0, all.names = T)
groups <- list(men1 = men1, men0 = men0, women1 = women1, women0 = women0)
rm(men1, men0, women1, women0)
?lapply()
means <- lapply(groups, mean
)
stderr <- lapply(groups, sd / sqrt(length))
groups[1]
groups[2]
stderr <- apply(groups, i, sd(groups[i]) / sqrt(length(groups[i])))
?apply()
stderr <- lapply(groups, sd/sqrt(length()))
stderr <- lapply(groups, sd/sqrt(length)
)
std <- function(x) sd(x) / sqrt(length(x)) ## function to compute standard error
stderr <- lapply(groups, std)
titanic <- read.csv("http://maitra.public.iastate.edu/stat579/datasets/titanic.txt")
table(titanic$PClass, titanic$Sex)
length(titanic$Sex[titanic$Sex == "male"]) / length(titanic$Sex) ## 64.8% male
source('~/Development/R/stat579/hw2.R', echo=TRUE)
table(titanic$PClass, titanic$Sex, titanic$Survived)
titanic <- read.csv("http://maitra.public.iastate.edu/stat579/datasets/titanic.txt")
(table(titanic$PClass, titanic$Sex, titanic$Survived)[,,2] / (class.gender)) * 100
(table(titanic$PClass, titanic$Sex, titanic$Survived)[,,2] / table(titanic$PClass, titanic$Sex)) * 100
table(titanic$PClass, titanic$Sex, titanic$Survived)
(table(titanic$PClass, titanic$Sex, titanic$Survived)[,,2] / table(titanic$PClass, titanic$Sex)) * 100
table(titanic$PClass, titanic$Sex, titanic$Survived)[,,2] / table(titanic$PClass, titanic$Sex) * 100
table(titanic$Sex, titanic$Survived)
table(titanic$Sex)
table(titanic$Survived)
table(titanic$Sex, titanic$Survived)
table(titanic$Sex, titanic$Survived) ## 66.7% of females survived, 16.7% of males survived
### Gender by Survival Status
table(titanic$Sex, titanic$Survived) ## 66.7% of females survived, 16.7% of males survived
table(titanic$PClass, titanic$Sex) ### Far more men on the ship than women
table(titanic$PClass, titanic$Sex, titanic$Survived)[,,2] / table(titanic$PClass, titanic$Sex) * 100
men <- titanic[titanic$Sex == "male" & !is.na(titanic$Age)]
wommen <- titanic[titanic$Sex == "female" & !is.na(titanic$Age)]
men <- titanic[titanic$Sex == "male"]
men <- titanic[["Age"], ["Survived"]][titanic$Sex == "male" & !is.na(titanic$Age)]
men <- titanic[["Age", "Survived"]][titanic$Sex == "male" & !is.na(titanic$Age)]
titanic[titanic$Sex == "male" & !is.na(titanic$Age)]
men <- titanic$[titanic$Sex == "male" & !is.na(titanic$Age)]
men <- titanic$Age[titanic$Sex == "male" & !is.na(titanic$Age)]
rm(men)
men1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "male" & !is.na(titanic$Age)]
men0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "male" & !is.na(titanic$Age)]
women1 <- titanic$Age[titanic$Survived == 1 & titanic$Sex == "female" & !is.na(titanic$Age)]
women0 <- titanic$Age[titanic$Survived == 0 & titanic$Sex == "female" & !is.na(titanic$Age)]
groups <- list(men1 = men1, men0 = men0, women1 = women1, women0 = women0)
means <- lapply(groups, mean)
rm(men1, men0, women1, women0)
means <- lapply(groups, mean)
std <- function(x) sd(x) / sqrt(length(x)) ## function to compute standard error
stderr <- lapply(groups, std)
means[women1] - means[women0] ## 5.97
means["women1"] - means["women0"] ## 5.97
means[["women1"]] - means[["women0"]] ## 5.97
means[["men1"]] - means[["men0"]] ## -6.37
stderr <- lapply(groups, std)
stderr
read.table("http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt")
read.tsv("http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt")
?read.table
read.delim(http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt, header = TRUE, sep = "\t")
read.delim(http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt, header = TRUE, sep = "\t")
read.delim("http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt", header = TRUE, sep = "\t")
political <-read.delim("http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt", header = TRUE, sep = "\t")
q()
read.csv("~/Dropbox/School/ENGL 302/CandidateSummaryAction.csv")
data <- read.csv("~/Dropbox/School/ENGL 302/CandidateSummaryAction.csv")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
qplot(data = data, geom = "hist", x = "can_par_aff")
qplot(data = data, geom = "histogram", x = "can_par_aff")
qplot(data = data, geom = "histogram", x = can_par_aff)
qplot(data = data, geom = "histogram", x = tot_con, colour = can_par_aff)
qplot(data = data, geom = "histogram", bin = 20000000, x = tot_con, colour = can_par_aff)
data$tot_con <- as.numeric(data$tot_con)
data <- read.csv("~/Dropbox/School/ENGL 302/CandidateSummaryAction.csv")
data <- read.csv("~/Dropbox/School/ENGL 302/CandidateSummaryAction.csv")
qplot(data = data, geom = "histogram", bin = 20000000, x = tot_con, colour = can_par_aff)
qplot(data = data, geom = "histogram", x = tot_con, colour = can_par_aff)
qplot(data = data, geom = "histogram", x = tot_con, color = can_par_aff)
qplot(data = data, geom = "histogram", x = tot_con, fill = can_par_aff)
data$tot_con_m <- data$tot_con / 1000000
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff)
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)")
cPalette <- c("Red", "Blue")
scale_fill_manual(values = cPalette)
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)") + scale_fill_manual(values = cPalette)
cPalette <- c("Blue", "Red")
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)") + scale_fill_manual(values = cPalette)
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)", ylab = "Number of Candidates") + scale_fill_manual(values = cPalette)
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)", ylab = "# of Candidates") + scale_fill_manual(values = cPalette)
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)", ylab = "# of Candidates") + scale_fill_manual(values = cPalette) + opts(legend.title = "Party")
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)", ylab = "# of Candidates") + scale_fill_manual(values = cPalette) + labs(fill = "Party")
data$can_nam[which(max(data$tot_con))]
data$can_nam[which(data$tot_con == max(data$tot_con))]
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con)
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con, stat = "identity")
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con_m, stat = "identity")
?table()
table(data$can_par_aff, data$tot_con_m)
table(data$can_par_aff, sum(data$tot_con_m))
table(data$can_par_aff)
rep.total <- sum(data$tot_con[which(data$can_par_aff == "REP")])
rep.total
rep.total <- sum(data$tot_con[which(data$can_par_aff == "REP")])
dem.total <- sum(data$tot_con[which(data$can_par_aff == "DEM")])
dem.total
table(data$can_par_aff, c(rep.total, dem.total))
tbl <- is.unique(data$can_par_aff)
tbl <- unique(data$can_par_aff)
tbl
tbl$party <- tbl
tbl[0]
tbl[1]
View(tbl)
View(tbl)
tbl$total <- c(rep.total, dem.total)
View(tbl)
table(data$can_par_aff)
tbl$count <- c(15, 4)
tbl$avg <- tbl$total / tbl$count
tbl
table(data$can_par_aff, tbl$avg / 1000000)
table(tbl$party, tbl$avg / 1000000)
table(tbl$party)
tbl
View(tbl)
tbl[1]
tbl[2]
tbl[3]
rm(tbl[1])
qplot(data = data, geom = "histogram", x = tot_con_m, fill = can_par_aff, xlab = "Total Contributions ($ Millions)", ylab = "# of Candidates") + scale_fill_manual(values = cPalette) + labs(fill = "Party")
qplot(data = data, geom = "histogram", x = can_par_aff)
qplot(data = data, geom = "histogram", x = can_par_aff, xlab="Party")
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con_m, stat = "identity")
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con_m, stat = "identity", xlab = "Party", ylab = "Total Contributions ($ Millions)")
qplot(data = data, geom = "histogram", x = can_par_aff, xlab="Party")
qplot(data = data, geom = "histogram", x = can_par_aff, xlab="Party", ylab = "# of Candidates")
qplot(data = data, geom = "bar", x = can_par_aff, y = tot_con_m, stat = "identity", xlab = "Party", ylab = "Total Contributions ($ Millions)")
qplot(data = tbl, geom = "bar", x = party, y = avg, stat = "identity", xlab = "Party", ylab = "Avg Contributions ($ Millions)")
qplot(data = as.data.frame(tbl), geom = "bar", x = party, y = avg, stat = "identity", xlab = "Party", ylab = "Avg Contributions ($ Millions)")
tbl$avg <- tbl$avg / 1000000
qplot(data = as.data.frame(tbl), geom = "bar", x = party, y = avg, stat = "identity", xlab = "Party", ylab = "Avg Contributions ($ Millions)")
# Undergraduate Research Assistantship (URA) Topic Model with LDAvis
## Riley McCloskey (RSM)
setwd("~/Development/R/ura")
input.dir <- "data/ALL39IN"
library(XML)
## Create vector of filenames within input directory
files.v <- dir(path = input.dir, pattern = "*.xml")
chunk.size <- 500 ## number of words per chunk
getNumTokensForDoc <- function(doc.object) {
paras<-getNodeSet(doc.object,
"/d:TEI/d:text/d:body//d:p",
c(d = "http://www.tei-c.org/ns/1.0"))
words<-paste(sapply(paras,xmlValue), collapse=" ")
words.lower<-tolower(words)
words.lower<-gsub("[^[:alnum:][:space:]']", " ", words.lower)
words.l<-strsplit(words.lower, "\\s+")
word.v<-unlist(words.l)
return (length(word.v))
}
## Load makeFlexTextChunks function
makeFlexTextChunks<-function(doc.object, chunk.size=500, percentage=TRUE){
paras<-getNodeSet(doc.object,
"/d:TEI/d:text/d:body//d:p",
c(d = "http://www.tei-c.org/ns/1.0"))
words<-paste(sapply(paras,xmlValue), collapse=" ")
words.lower<-tolower(words)
words.lower<-gsub("[^[:alnum:][:space:]']", " ", words.lower)
words.l<-strsplit(words.lower, "\\s+")
word.v<-unlist(words.l)
x <- seq_along(word.v)
if (percentage){
max.length<-length(word.v)/chunk.size
chunks.l <- split(word.v, ceiling(x/max.length))
} else {
chunks.l <- split(word.v, ceiling(x/chunk.size))
#deal with small chunks at the end
if (length(chunks.l[[length(chunks.l)]]) <= length(chunks.l[[length(chunks.l)]]) / 2){ ## RSM 9-22-15
chunks.l[[length(chunks.l) - 1]] <- c(chunks.l[[length(chunks.l)-1]],
chunks.l[[length(chunks.l)]])
chunks.l[[length(chunks.l)]]<-NULL
}
}
chunks.l<-lapply(chunks.l, paste, collapse=" ")
chunks.df<-do.call(rbind, chunks.l)
return(chunks.df)
}
## Loop through documents and chunk them up
topic.m <- NULL
for (i in 1:length(files.v)) {
doc.object<-xmlTreeParse(file.path(input.dir, files.v[i]),
useInternalNodes=TRUE)
chunk.df<-makeFlexTextChunks(doc.object, chunk.size,
percentage=FALSE)
textname<-gsub("\\..*","", files.v[i])
segments.m<-cbind(paste(textname, i, segment=1:nrow(chunk.df), sep="_"), chunk.df)
topic.m<-rbind(topic.m, segments.m)
}
doc.length <- NULL
length(doc.length) <- length(files.v)
## Loop through documents and get number of tokens per document
for (i in 1:length(files.v)) {
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]),
useInternalNodes=TRUE)
n.tokens <- getNumTokensForDoc(doc.object)
doc.length[i] <- n.tokens
}
documents <- as.data.frame(topic.m, stringsAsFactors = F)
colnames(documents) <- c("id", "text")
# RSM 10-7-2015: fix for duplicate row.names Error
rownames(documents) <- make.names(documents$id, unique = TRUE)
## Part 2 - Mallet
library(mallet)
mallet.instances <- mallet.import(documents$id, documents$text, "data/stoplist1.csv", FALSE, token.regexp="[\\p{L}']+")
n.topics <- 25
topic.model <- MalletLDA(num.topics = n.topics)
topic.model$loadDocuments(mallet.instances)
vocabulary <- topic.model$getVocabulary()
# RSM - BUG: Source of error and program breaking, do not use mallet.word.freqs()
# word.freqs <- mallet.word.freqs(topic.model)
topic.model$train(800) ## RSM - GPA used 2000, this only takes about 10 mins on MacBook Pro
topic.words.m <- mallet.topic.words(topic.model, smoothed = TRUE, normalized = TRUE)
topic.words <- mallet.topic.words(topic.model, smoothed = FALSE, normalized = FALSE)
topic.words.c <- apply(topic.words, 2, sum)
doc.topics.m <- mallet.doc.topics(topic.model, smoothed = TRUE, normalized = TRUE)
docs.length <- rep(chunk.size, length(documents$text))
docs.length <- as.vector(docs.length)
library(LDAvis)
json <- createJSON(phi = topic.words.m, theta = doc.topics.m, doc.length = docs.length, vocab = vocabulary, term.frequency = topic.words.c)
serVis(json)
